<?init class="org.zkoss.zkplus.databind.AnnotateDataBinderInit" ?>
<zk>
	<zscript><![CDATA[
		import java.util.*;
		
		import org.zkoss.zk.ui.*;
		import org.zkoss.zk.ui.event.*;
		import org.zkoss.zk.ui.util.GenericForwardComposer;

		import org.zkoss.zkplus.databind.BindingListModel;
		import org.zkoss.zkplus.databind.TypeConverter;
		import org.zkoss.zul.*;
		
		public class Composer extends GenericForwardComposer {
		
			private List sites;
			private Product product;
			
			public void doAfterCompose(Component comp) throws Exception {
				super.doAfterCompose(comp);
				initData();
			}
			
			private void initData() {
				sites = new ArrayList();
				Set psites = new HashSet();
				
				Site zk = new Site("ZK","http://www.zkoss.org/");
				Site yahoo = new Site("Yahoo","http://www.yahoo.com/");
				
				sites.add(zk);
				sites.add(new Site("Google","http://www.google.com/"));
				sites.add(yahoo);
				
				psites.add(zk);
				psites.add(yahoo);
				
				product = new Product(psites);
			}
			public List getAvailableSites(){
				return sites;
			}
			public Product getProduct(){
				return product;
			}
			public class Site {
				private String url, name;
		
				public Site(String name, String url) {
					super();
					this.name = name;
					this.url = url;
				}
		
				public String getUrl() {
					return url;
				}
		
				public String getName() {
					return name;
				}
				public boolean equals(Object obj) {
					if (obj instanceof Site){
						Site s = (Site)obj;
						return getUrl().equals(s.getUrl());
					}
					return false;
				}
				public int hashCode() {
					return name.hashCode() * url.hashCode();
				}
			}
			public class Product{
				private Set sites;
				public Product(Set sites) {
					this.sites = sites;
				}
				public Set getSites() {
					return sites;
				}
			}
		}

		/**
		 * Convert selected items to bean and vice versa.
		 *
		 */
		public class SelectedItemsConverter implements TypeConverter, java.io.Serializable {

			public Object coerceToUi(Object val, Component comp) { //load
				Listbox lbx = (Listbox) comp;
				lbx.clearSelection();
				if (val != null && val instanceof Collection) {
					Iterator valuesIterator = ((Collection) val).iterator();
					Set items = new HashSet();

					final ListModel xmodel = lbx.getModel();
					if (xmodel instanceof BindingListModel) {
						final BindingListModel model = (BindingListModel) xmodel;
						Listitem item = null;
						while (valuesIterator.hasNext()) {
							int index = model.indexOf(valuesIterator.next());
							if (index >= 0) {
								item = (Listitem) lbx.getItemAtIndex(index);
								if (item != null)
									items.add(item);
							}
						}	
						//We need this to support load-when:onSelect when first load 
						//the page in (so it is called only once).
						if (items.size() > 0 && items.size() != lbx.getSelectedCount()) { // bug 1647817, avoid endless-loop
							//bug #2140491
							Executions.getCurrent().setAttribute("zkoss.zkplus.databind.ON_SELECT"+lbx.getUuid(), Boolean.TRUE);
							Events.postEvent(new SelectEvent("onSelect", lbx, items, item));
						}    
						lbx.setSelectedItems(items);
						return TypeConverter.IGNORE;

					} else if (xmodel == null) { //no model case, assume Listitem.value to be used with selectedItem
						//iterate to find the selected item assume the value (select mold)
						while (valuesIterator.hasNext()) {
							Object value = valuesIterator.next();
							for (Iterator it = lbx.getItems().iterator(); it.hasNext();) {
								Listitem item = (Listitem) it.next();
								if (value.equals(item.getValue())) {
									items.add(item);
								}
							}
						}
						lbx.setSelectedItems(items);
						return TypeConverter.IGNORE;
					} else {
						throw new UiException("model of the databind listbox "+lbx+" must be an instanceof of org.zkoss.zkplus.databind.BindingListModel." + xmodel);
					}
				}
			  	return null;
			}
		  
			public Object coerceToBean(Object val, Component comp) { //save
			  	final Listbox lbx = (Listbox) comp;
				if (Executions.getCurrent().getAttribute("zkoss.zkplus.databind.ON_SELECT"+lbx.getUuid()) != null) {
					//bug #2140491
					//triggered by coerceToUi(), ignore this
					Executions.getCurrent().removeAttribute("zkoss.zkplus.databind.ON_SELECT"+lbx.getUuid());
					return TypeConverter.IGNORE;
				}
			  	if (val != null) {
			  		final ListModel model = lbx.getModel();
			  		Iterator itemsIterator = ((Set) lbx.getSelectedItems()).iterator();
			  		HashSet selectedValues = new HashSet();
			  		
			  		while (itemsIterator.hasNext()) {
						Listitem listitem = (Listitem) itemsIterator.next();
						if (model != null) { // model case
							selectedValues.add(model.getElementAt(listitem.getIndex()));
						} else { // no model case --> Value
							selectedValues.add(listitem.getValue());
						}
			  		}	
			  		return selectedValues;
			  	}
			 	return null;
			}
		}
	]]></zscript>

	<window id="win" apply="Composer" title="Sites"
		border="normal">
		<listbox id="lbActiveSite" checkmark="true" rows="4"
			model="@{win$Composer.availableSites}" width="100%"
			multiple="true"
			selectedItem="@{win$Composer.product.sites, converter='SelectedItemsConverter'}"
			>
			<listitem self="@{each=site}">
				<listcell label="@{site.name}" />
				<listcell >
					<a href="@{site.url}" label="@{site.url}"/>
				</listcell>
			</listitem>
		</listbox>
	</window>
</zk>